package nl.uu.cs.ape.sat.models;

import java.util.ArrayList;
import java.util.List;
/**
 *  The {@code All_solutions} class is used to store all the SAT solutions generated by the program, 
 *  together with the corresponding mappings.
 * @author Vedran Kasalica
 *
 */
public class All_solutions {

	private List<SAT_solution> solutions;
	private int solutionsFound;
	private int solutionsFoundMax;
	private int solutionLengthMax;
	private int currSolutionLenght;
	private AtomMapping mappings;

	
	public All_solutions(APEConfig config) {
		solutions = new ArrayList<SAT_solution>();
		solutionsFound = 0;
		
		/** Provides mapping from each atom to a number, and vice versa */
		mappings = new AtomMapping();
		/*
		 * Variables defining the current and maximum lengths and solutions count.
		 */
		solutionsFound = 0;
		solutionsFoundMax = (config.getMax_no_solutions() > 0) ? config.getMax_no_solutions() : 1000;
		currSolutionLenght = (config.getSolution_min_length() > 0) ? config.getSolution_min_length() : 1;
		solutionLengthMax = (config.getSolution_max_length() > 0) ? config.getSolution_max_length() : 20;
	}


	public List<SAT_solution> getSolutions() {
		return solutions;
	}


	public int getSolutionsFound() {
		return solutionsFound;
	}


	public int getSolutionsFoundMax() {
		return solutionsFoundMax;
	}


	public int getSolutionLengthMax() {
		return solutionLengthMax;
	}
	
	public int getCurrSolutionLenght() {
		return currSolutionLenght;
	}
	
	/** Increase the current length of the solution that is being explored by 1 */
	public void increseLength() {
		currSolutionLenght++;
	}


	public AtomMapping getMappings() {
		return mappings;
	}
	
	
}
