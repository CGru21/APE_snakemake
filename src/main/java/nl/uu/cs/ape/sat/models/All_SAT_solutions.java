package nl.uu.cs.ape.sat.models;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
/**
 *  The {@code All_solutions} class is used to store all the SAT solutions generated by the program, 
 *  together with the corresponding mappings.
 *  
 * @author Vedran Kasalica
 *
 */
public class All_SAT_solutions implements All_solutions {

	private List<SAT_solution> solutions;
	private int solutionsFoundMax;
	private int solutionLengthMax;
	private int currSolutionLenght;
	private AtomMapping mappings;

	
	public All_SAT_solutions(APEConfig config) {
		solutions = new ArrayList<SAT_solution>();
		
		/** Provides mapping from each atom to a number, and vice versa */
		mappings = new AtomMapping();
		/*
		 * Variables defining the current and maximum lengths and solutions count.
		 */
		solutionsFoundMax = (config.getMax_no_solutions() > 0) ? config.getMax_no_solutions() : 1000;
		currSolutionLenght = (config.getSolution_min_length() > 0) ? config.getSolution_min_length() : 1;
		solutionLengthMax = (config.getSolution_max_length() > 0) ? config.getSolution_max_length() : 20;
	}


	public Solution getSolutions() {
		return (Solution) solutions;
	}

	public int getSolutionsFound() {
		return solutions.size();
	}


	public int getSolutionsFoundMax() {
		return solutionsFoundMax;
	}


	public int getSolutionLengthMax() {
		return solutionLengthMax;
	}
	
	public int getCurrSolutionLenght() {
		return currSolutionLenght;
	}
	
	/** Increments the current length of the solution that is being explored by 1. */
	public void incrementLength() {
		currSolutionLenght++;
	}


	public AtomMapping getMappings() {
		return mappings;
	}
	/**
	 * Returns true if the list of all the solutions contains no elements.
	 * @return {@code true} if the list contains no elements
	 */
	public boolean isEmpty() {
		return solutions.isEmpty();
	}

	/**
	 * Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)
	 * @param currSolutions - solutions that should be added to the list of all solutions
	 * @return {@code true} if this list changed as a result of the call
	 */
	public boolean addAll(List<? extends Solution> currSolutions) {
		if(solutions.addAll((Collection<SAT_solution>) currSolutions)) {
			return true;
		}
		
		return false;
		
	}


	public SAT_solution get(int index) {
		return solutions.get(index);
	}
}
